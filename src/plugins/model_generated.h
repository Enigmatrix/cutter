// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MODEL_MODEL_H_
#define FLATBUFFERS_GENERATED_MODEL_MODEL_H_

#include "flatbuffers/flatbuffers.h"

namespace model {

struct Message;

struct CommentAdded;

struct CommentDeleted;

enum MessageContent {
  MessageContent_NONE = 0,
  MessageContent_CommentAdded = 1,
  MessageContent_CommentDeleted = 2,
  MessageContent_MIN = MessageContent_NONE,
  MessageContent_MAX = MessageContent_CommentDeleted
};

inline const MessageContent (&EnumValuesMessageContent())[3] {
  static const MessageContent values[] = {
    MessageContent_NONE,
    MessageContent_CommentAdded,
    MessageContent_CommentDeleted
  };
  return values;
}

inline const char * const *EnumNamesMessageContent() {
  static const char * const names[] = {
    "NONE",
    "CommentAdded",
    "CommentDeleted",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageContent(MessageContent e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMessageContent()[index];
}

template<typename T> struct MessageContentTraits {
  static const MessageContent enum_value = MessageContent_NONE;
};

template<> struct MessageContentTraits<CommentAdded> {
  static const MessageContent enum_value = MessageContent_CommentAdded;
};

template<> struct MessageContentTraits<CommentDeleted> {
  static const MessageContent enum_value = MessageContent_CommentDeleted;
};

bool VerifyMessageContent(flatbuffers::Verifier &verifier, const void *obj, MessageContent type);
bool VerifyMessageContentVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USERNAME = 4,
    VT_CONTENT_TYPE = 6,
    VT_CONTENT = 8
  };
  const flatbuffers::String *username() const {
    return GetPointer<const flatbuffers::String *>(VT_USERNAME);
  }
  MessageContent content_type() const {
    return static_cast<MessageContent>(GetField<uint8_t>(VT_CONTENT_TYPE, 0));
  }
  const void *content() const {
    return GetPointer<const void *>(VT_CONTENT);
  }
  template<typename T> const T *content_as() const;
  const CommentAdded *content_as_CommentAdded() const {
    return content_type() == MessageContent_CommentAdded ? static_cast<const CommentAdded *>(content()) : nullptr;
  }
  const CommentDeleted *content_as_CommentDeleted() const {
    return content_type() == MessageContent_CommentDeleted ? static_cast<const CommentDeleted *>(content()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.Verify(username()) &&
           VerifyField<uint8_t>(verifier, VT_CONTENT_TYPE) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           VerifyMessageContent(verifier, content(), content_type()) &&
           verifier.EndTable();
  }
};

template<> inline const CommentAdded *Message::content_as<CommentAdded>() const {
  return content_as_CommentAdded();
}

template<> inline const CommentDeleted *Message::content_as<CommentDeleted>() const {
  return content_as_CommentDeleted();
}

struct MessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_username(flatbuffers::Offset<flatbuffers::String> username) {
    fbb_.AddOffset(Message::VT_USERNAME, username);
  }
  void add_content_type(MessageContent content_type) {
    fbb_.AddElement<uint8_t>(Message::VT_CONTENT_TYPE, static_cast<uint8_t>(content_type), 0);
  }
  void add_content(flatbuffers::Offset<void> content) {
    fbb_.AddOffset(Message::VT_CONTENT, content);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> username = 0,
    MessageContent content_type = MessageContent_NONE,
    flatbuffers::Offset<void> content = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_username(username);
  builder_.add_content_type(content_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    MessageContent content_type = MessageContent_NONE,
    flatbuffers::Offset<void> content = 0) {
  return model::CreateMessage(
      _fbb,
      username ? _fbb.CreateString(username) : 0,
      content_type,
      content);
}

struct CommentAdded FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ADDR = 4,
    VT_CMT = 6
  };
  uint64_t addr() const {
    return GetField<uint64_t>(VT_ADDR, 0);
  }
  const flatbuffers::String *cmt() const {
    return GetPointer<const flatbuffers::String *>(VT_CMT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ADDR) &&
           VerifyOffset(verifier, VT_CMT) &&
           verifier.Verify(cmt()) &&
           verifier.EndTable();
  }
};

struct CommentAddedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_addr(uint64_t addr) {
    fbb_.AddElement<uint64_t>(CommentAdded::VT_ADDR, addr, 0);
  }
  void add_cmt(flatbuffers::Offset<flatbuffers::String> cmt) {
    fbb_.AddOffset(CommentAdded::VT_CMT, cmt);
  }
  explicit CommentAddedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CommentAddedBuilder &operator=(const CommentAddedBuilder &);
  flatbuffers::Offset<CommentAdded> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CommentAdded>(end);
    return o;
  }
};

inline flatbuffers::Offset<CommentAdded> CreateCommentAdded(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t addr = 0,
    flatbuffers::Offset<flatbuffers::String> cmt = 0) {
  CommentAddedBuilder builder_(_fbb);
  builder_.add_addr(addr);
  builder_.add_cmt(cmt);
  return builder_.Finish();
}

inline flatbuffers::Offset<CommentAdded> CreateCommentAddedDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t addr = 0,
    const char *cmt = nullptr) {
  return model::CreateCommentAdded(
      _fbb,
      addr,
      cmt ? _fbb.CreateString(cmt) : 0);
}

struct CommentDeleted FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ADDR = 4
  };
  uint64_t addr() const {
    return GetField<uint64_t>(VT_ADDR, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ADDR) &&
           verifier.EndTable();
  }
};

struct CommentDeletedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_addr(uint64_t addr) {
    fbb_.AddElement<uint64_t>(CommentDeleted::VT_ADDR, addr, 0);
  }
  explicit CommentDeletedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CommentDeletedBuilder &operator=(const CommentDeletedBuilder &);
  flatbuffers::Offset<CommentDeleted> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CommentDeleted>(end);
    return o;
  }
};

inline flatbuffers::Offset<CommentDeleted> CreateCommentDeleted(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t addr = 0) {
  CommentDeletedBuilder builder_(_fbb);
  builder_.add_addr(addr);
  return builder_.Finish();
}

inline bool VerifyMessageContent(flatbuffers::Verifier &verifier, const void *obj, MessageContent type) {
  switch (type) {
    case MessageContent_NONE: {
      return true;
    }
    case MessageContent_CommentAdded: {
      auto ptr = reinterpret_cast<const CommentAdded *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_CommentDeleted: {
      auto ptr = reinterpret_cast<const CommentDeleted *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyMessageContentVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageContent(
        verifier,  values->Get(i), types->GetEnum<MessageContent>(i))) {
      return false;
    }
  }
  return true;
}

inline const model::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<model::Message>(buf);
}

inline const model::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<model::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<model::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<model::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<model::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<model::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace model

#endif  // FLATBUFFERS_GENERATED_MODEL_MODEL_H_
